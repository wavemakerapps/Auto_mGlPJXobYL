/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.auto_mglpjxobyl.multipartdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.auto_mglpjxobyl.multipartdb.Blobdata;


/**
 * ServiceImpl object for domain model class Blobdata.
 *
 * @see Blobdata
 */
@Service("multipartDB.BlobdataService")
@Validated
public class BlobdataServiceImpl implements BlobdataService {

    private static final Logger LOGGER = LoggerFactory.getLogger(BlobdataServiceImpl.class);


    @Autowired
    @Qualifier("multipartDB.BlobdataDao")
    private WMGenericDao<Blobdata, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Blobdata, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "multipartDBTransactionManager")
    @Override
	public Blobdata create(Blobdata blobdata) {
        LOGGER.debug("Creating a new Blobdata with information: {}", blobdata);

        Blobdata blobdataCreated = this.wmGenericDao.create(blobdata);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(blobdataCreated);
    }

	@Transactional(readOnly = true, value = "multipartDBTransactionManager")
	@Override
	public Blobdata getById(Integer blobdataId) {
        LOGGER.debug("Finding Blobdata by id: {}", blobdataId);
        return this.wmGenericDao.findById(blobdataId);
    }

    @Transactional(readOnly = true, value = "multipartDBTransactionManager")
	@Override
	public Blobdata findById(Integer blobdataId) {
        LOGGER.debug("Finding Blobdata by id: {}", blobdataId);
        try {
            return this.wmGenericDao.findById(blobdataId);
        } catch(EntityNotFoundException ex) {
            LOGGER.debug("No Blobdata found with id: {}", blobdataId, ex);
            return null;
        }
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "multipartDBTransactionManager")
	@Override
	public Blobdata update(Blobdata blobdata) {
        LOGGER.debug("Updating Blobdata with information: {}", blobdata);

        this.wmGenericDao.update(blobdata);
        this.wmGenericDao.refresh(blobdata);

        return blobdata;
    }

    @Transactional(value = "multipartDBTransactionManager")
	@Override
	public Blobdata delete(Integer blobdataId) {
        LOGGER.debug("Deleting Blobdata with id: {}", blobdataId);
        Blobdata deleted = this.wmGenericDao.findById(blobdataId);
        if (deleted == null) {
            LOGGER.debug("No Blobdata found with id: {}", blobdataId);
            throw new EntityNotFoundException(String.valueOf(blobdataId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "multipartDBTransactionManager")
	@Override
	public void delete(Blobdata blobdata) {
        LOGGER.debug("Deleting Blobdata with {}", blobdata);
        this.wmGenericDao.delete(blobdata);
    }

	@Transactional(readOnly = true, value = "multipartDBTransactionManager")
	@Override
	public Page<Blobdata> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Blobdatas");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "multipartDBTransactionManager")
    @Override
    public Page<Blobdata> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Blobdatas");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "multipartDBTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service multipartDB for table Blobdata to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "multipartDBTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "multipartDBTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

