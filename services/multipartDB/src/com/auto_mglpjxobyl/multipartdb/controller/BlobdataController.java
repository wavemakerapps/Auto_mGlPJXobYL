/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.auto_mglpjxobyl.multipartdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.auto_mglpjxobyl.multipartdb.Blobdata;
import com.auto_mglpjxobyl.multipartdb.service.BlobdataService;


/**
 * Controller object for domain model class Blobdata.
 * @see Blobdata
 */
@RestController("multipartDB.BlobdataController")
@Api(value = "BlobdataController", description = "Exposes APIs to work with Blobdata resource.")
@RequestMapping("/multipartDB/Blobdata")
public class BlobdataController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BlobdataController.class);

    @Autowired
	@Qualifier("multipartDB.BlobdataService")
	private BlobdataService blobdataService;

	@ApiOperation(value = "Creates a new Blobdata instance.")
    @RequestMapping(method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Blobdata createBlobdata(@RequestPart("wm_data_json") Blobdata blobdata, @RequestPart(value = "blobcol", required = false) MultipartFile _blobcol) {
		LOGGER.debug("Create Blobdata with information: {}" , blobdata);

    blobdata.setBlobcol(WMMultipartUtils.toByteArray(_blobcol));
		blobdata = blobdataService.create(blobdata);
		LOGGER.debug("Created Blobdata with information: {}" , blobdata);

	    return blobdata;
	}

    @ApiOperation(value = "Returns the Blobdata instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public Blobdata getBlobdata(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Blobdata with id: {}" , id);

        Blobdata foundBlobdata = blobdataService.getById(id);
        LOGGER.debug("Blobdata details with id: {}" , foundBlobdata);

        return foundBlobdata;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in Blobdata instance" )
    @RequestMapping(value = "/{id}/content/{fieldName}", method = RequestMethod.GET, produces="application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DownloadResponse getBlobdataBLOBContent(@PathVariable("id") Integer id, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestParam(value="download", defaultValue = "false") boolean download) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in Blobdata instance" , fieldName);

        if(!WMRuntimeUtils.isLob(Blobdata.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName + " is not a valid BLOB type");
        }
        Blobdata blobdata = blobdataService.getById(id);

        return WMMultipartUtils.buildDownloadResponseForBlob(blobdata, fieldName, httpServletRequest, download);
    }

    @ApiOperation(value = "Updates the Blobdata instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Blobdata editBlobdata(@PathVariable("id") Integer id, @RequestBody Blobdata blobdata) {
        LOGGER.debug("Editing Blobdata with id: {}" , blobdata.getId());

        blobdata.setId(id);
        blobdata = blobdataService.update(blobdata);
        LOGGER.debug("Blobdata details with id: {}" , blobdata);

        return blobdata;
    }

    @ApiOperation(value = "Updates the Blobdata instance associated with the given id.This API should be used when Blobdata instance fields that require multipart data.") 
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Blobdata editBlobdata(@PathVariable("id") Integer id, MultipartHttpServletRequest multipartHttpServletRequest) {
        Blobdata newBlobdata = WMMultipartUtils.toObject(multipartHttpServletRequest, Blobdata.class, "multipartDB");
        newBlobdata.setId(id);

        Blobdata oldBlobdata = blobdataService.getById(id);
        WMMultipartUtils.updateLobsContent(oldBlobdata, newBlobdata);
        LOGGER.debug("Updating Blobdata with information: {}" , newBlobdata);

        return blobdataService.update(newBlobdata);
    }

    @ApiOperation(value = "Deletes the Blobdata instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public boolean deleteBlobdata(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Blobdata with id: {}" , id);

        Blobdata deletedBlobdata = blobdataService.delete(id);

        return deletedBlobdata != null;
    }

    /**
     * @deprecated Use {@link #findBlobdatas(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Blobdata instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Blobdata> searchBlobdatasByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Blobdatas list by query filter:{}", (Object) queryFilters);
        return blobdataService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Blobdata instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Blobdata> findBlobdatas(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Blobdatas list by filter:", query);
        return blobdataService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Blobdata instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Blobdata> filterBlobdatas(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Blobdatas list by filter", query);
        return blobdataService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportBlobdatas(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return blobdataService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Blobdata instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countBlobdatas( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Blobdatas");
		return blobdataService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getBlobdataAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return blobdataService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BlobdataService instance
	 */
	protected void setBlobdataService(BlobdataService service) {
		this.blobdataService = service;
	}

}

